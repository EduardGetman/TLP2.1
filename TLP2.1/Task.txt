Создать исполнитель примитивных логических и вычислительных команд. Предоставить пользователю приложение, дающее доступ к данному исполнителю, список команд понятных исполнителю и интерфейс разработки программы из доступных команд. Помимо
вышесказанного нужно предоставить инструмент отладки программы и просмотра результатов.

Исполнитель предоставляет интерфейс из 26 регистров именованными английским алфавитом от А до Z, списка команд, каретки
показывающей какую команду исполнитель выполнит следующей, и функций выполнения следующей команды. Результатом 
исполненной программы являются значения в регистрах. Помимо вышеописанного интерфейса исполнитель так же имеет функции
отчистки регистров и стека команд и перевода каретки на нулевую команду. Исполнитель имеет два режима: режим установки
и режим исполнения. Во время режима установки возможно изменять значения регистров и список команд из вне. В режиме
исполнения единственной доступной функцией является исполнение следующей команды.

Команда исполнителю формируется следующим образом

"имя команды" "имя первого регистра" "имя второго регистра" - для дву-регистровых команд
"имя команды" "имя регистра" - для одно-регистровых команд
"имя команды" - для нуль-регистровых команд

Список дву-регистровых команд:
ADD  - прибавляет значению первого регистра значение второго регистра;
SUB  - вычитает значение второго регистра из значения первого регистра;
MUL  - умножает значение первого регистра на значение второго регистра;
DIV  - делит значение первого регистра на значение второго регистра;
AND  - выполняет побитовую операцию "И" для первого и второго регистров и кладет результат в первый регистр;
OR	 - выполняет побитовую операцию "ИЛИ" для первого и второго регистров и кладет результат в первый регистр;
XOR  - выполняет побитовую операцию "НЕ ИЛИ" для первого и второго регистров и кладет результат в первый регистр;
MOV  - Кладет значение второго регистра в первый регистр;
JNZ  - приравнивает значению каретки значению первого регистра, если второй регистр не равен нулю;
JNEG - приравнивает значению каретки значению первого регистра, если второй регистр меньше нуля;

Список одно-регистровых команд:
NOT - выполняет побитовую операцию "НЕ" значения регистра;
JMP - приравнивает значению каретки значению первого регистра;

Список нуль-регистровых команд:
STOP - Останавливает выполнение программы;

Пример программы:
(2+3)/25


MOV A 2;
MOV C 5;
MOV Z 8
MOV X 4

JNZ Z C;
ADD A A;
SUB C 1;
JMP X;
STOP;